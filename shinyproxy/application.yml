# https://lukesingham.com/shiny-containers-with-shinyproxy/
# for custom templates https://github.com/openanalytics/shinyproxy-config-examples/tree/master/04-custom-html-template

proxy:
  default-max-instances: -1
  title: ShinyProxy
  port: 8080
  heartbeat-timeout: 120000
  container-log-path: /container-logs
  template-path: ./templates/2col
  authentication: simple
  admin-groups: admin
  hide-navbar: false
  logo-url: https://raw.githubusercontent.com/bouldermaettel/A848/main/data/SMC40%208.jpg
  landing-page: /
  # docker, docker-swarm or kubernetes
#  container-backend: docker
  users:
  - name: brudis
    password: brudis@smc40
    groups: admin
  - name: nca
    password: nca_22
    groups: sendr
  - name: matthias.mueller
    password: bouldermaettel@smc40
    groups: admin
  - name: anouk.aguirre
    password: legal@smc
    groups: neraa_
  - name: neraa
    password: neraa@smc
    groups: neraa_public

  docker:
      internal-networking: true
      container-network: 'sp-net'
  specs:
  - id: neraa
    max_instances: -1
    display-name: NERAA
    description: Anonymization application
    container-cmd: ["R", "-e", "shiny::runApp('/root/app', host = '0.0.0.0', port = 3939)"]
    container-image: bouldermaettel/neraa
    port: 3939
    access-groups: [admin, neraa_legal, neraa_public]
    container-network: "${proxy.docker.container-network}"
    container-volumes: ["/root/app:/mnt", "/root/app/www/training-data:/mnt/training-data"]
#   - id: A848
#     max-instances: -1
#     display-name: A848
#     description: A848 duplicate finder
#     container-cmd: [ "R", "-e", "shiny::runApp('/root/app', host = '0.0.0.0', port = 3838)" ]
#     container-image: bouldermaettel/duplicate-finder
#     access-groups: [a848su, a848, admin]
#     container-network: "${proxy.docker.container-network}"
#     port: 3838
  - id: OrExt
    max-instances: -1
    display-name: OrExt
    description: Oracle MEP extractor
    container-cmd: [ "R", "-e", "shiny::runApp('/root/app', host = '0.0.0.0', port = 4040)" ]
    container-image: bouldermaettel/oracle
    access-groups: [admin]
    container-network: "${proxy.docker.container-network}"
    port: 4040
#   - id: SendigR
#     max-instances: -1
#     display-name: SendigR
#     description: Send Demo SMC 4.0
#     container-cmd: [ "R", "-e", "shiny::runApp('/home/sender', port = 20000)" ]
#     container-image: alho94/sender-demo
#     access-groups: [ sendr ]
#     container-network: "${proxy.docker.container-network}"
#     port: 20000
#  - id: pycharm
#    max_instances: -1
#    display-name: Pycharm
#    description: Python and R IDE
#    #    container-cmd: ["R", "-e", "shiny::runApp('/root/app', host = '0.0.0.0', port = 3939)"]
##    container-image: jetbrains/projector-pycharm-c
#    container-image: projectorimages/projector-pycharm-c
#    port: 8887
#    access-groups: [pycharm, admin]
#    container-network: "${proxy.docker.container-network}"
#    container-volumes: ["pycharm-data:/home/projector-user"]
# - id: pycharm-p
#   max_instances: -1
#   display-name: Pycharm Professional
#   description: Python and R IDE
#   #    container-cmd: ["R", "-e", "shiny::runApp('/root/app', host = '0.0.0.0', port = 3939)"]
#   #    container-image: jetbrains/projector-pycharm-c
#   container-image: projectorimages/projector-pycharm-p
#   port: 8887
#   access-groups: [pycharm, admin]
#   container-network: "${proxy.docker.container-network}"
#   container-volumes: ["pycharm-data:/home"]

logging:
  file:
    log/shinyproxy.log

